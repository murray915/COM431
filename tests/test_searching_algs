import pytest
import sorting_algs as algs
import random as rd
import searching_algs as srslgs


@pytest.mark.parametrize('name', 'case_sens', 'fuzzy_sear', 'val', 'expected_result', 
                         [("test_1",True,False,"Abu Dhabi Louvre",0),
                          ("test_2",False,True,"Abu",0)                          
                          ])
def test_sorting_algs(name, case_sens, fuzzy_sear, val, expected_result):    
    """ Run for all top/bottom values for storm cat """
    
    sorted_list =  [
        'Abu Dhabi Louvre', 'Acropolis of Athens', 'Ajanta Caves', 'Alhambra', 'Amalfi Coast', 'Amazon Rainforest', 'Amber Fort', 'Angel Falls', 'Angkor Wat', 'Antelope Canyon', 'Arequipa', 'Bagan Temples', 'Banaras Ghats', 'Banff National Park', 'Batu Caves', 'Berlin Wall', 'Big Ben', 'Blue Lagoon', 'Blue Mosque', 'Bondi Beach', 'Borobudur Temple', 'Brandenburg Gate', 'Brooklyn Bridge', 'Buckingham Palace', 'Burj Khalifa', 'CN Tower', 'Cameron',
        'Highlands', 'Cancún Beaches', 'Cape of Good Hope', 'Cappadocia', 'Central Park', 'Charminar', 'Chicago Riverwalk', 'Chichen Itza', 'Christ the Redeemer', 'Christ the Redeemer', 'Christchurch Botanic Gardens', 
        'Château de Chillon', 'Cinque Terre', 'Colosseum', 'Copacabana Beach', 'Cusco', 'Dead Sea', 'Diocletians Palace', 'Dome of the Rock', 'Dubai Mall', 'Dubai Marina', 'Dubrovnik Old Town', 'Eiffel Tower', 'Eiffel Tower', 
        'Empire State Building', 'Ephesus', 'Fraser Island', 'Frida Kahlo Museum', 'Galápagos Islands', 'Gardens by the Bay', 'Gateway of India', 'Geysir', 'Golden Gate Bridge', 'Grand Canyon', 'Great Barrier Reef', 'Great Ocean Road', 
        'Great Wall of China', 'Gyeongbokgung Palace', 'Ha Long Bay', 'Hagia Sophia', 'Hampi Ruins', 'Hobbiton Movie Set', 'Iguazu Falls', 'Jeju Island', 'Jerusalem Old City', 'Kruger National Park', 'La Rambla', 'Lake Bled', 'Lake Como', 'Lake Geneva', 'Lake Titicaca', 'Leaning Tower of Pisa', 'Louvre Museum', 'Machu Picchu', 'Marina Bay Sands', 'Marina Beach', 'Masada', 'Matterhorn', 'Meenakshi Temple', 'Merlion Park', 'Milford Sound', 'Moai Statues of Easter Island', 'Mont Saint-Michel', 'Mount Everest', 'Mount Fuji', 'Mount Kilimanjaro', 'Mount Rushmore', 'Mt. Vesuvius', 'Namsan Tower', 'Nazca Lines', 'Neuschwanstein Castle', 'Niagara Falls', 'Palm Jumeirah', 'Pamukkale', 'Park Güell', 'Petra', 'Petronas Towers', 'Plitvice Lakes', 'Pompeii', 'Prague Castle', 'Pyramids of Giza', 
        'Queenstown', 'Qutub Minar', 'Red Fort', 'Redwood National Park', 'Reykjavik Church', 'Robben Island', 'Rotorua Geothermal Park', 'Sacred Valley', 'Sagrada Familia', 'Santorini', 'Sentosa Island', 'Serengeti National Park', 'Sheikh Zayed Mosque', 'Skógafoss', 'Smithsonian Institution', 'St. Peter’s Basilica', 'Statue of Liberty', 'Stonehenge', 'Sugarloaf Mountain', 'Sydney Opera House', 'Table Mountain', 'Taj Mahal', 'Teotihuacan', 'The Shard', 'Thingvellir National Park', 'Times Square', 'Tokyo Tower', 'Topkapi Palace', 'Tower of London', 'Trevi Fountain', 'Tulum Ruins', 'Twelve Apostles', 'Ubud Monkey Forest', 'Uluru', 'Universal Studios', 'Vatican Museums', 'Versailles Palace', 'Victoria & Alfred Waterfront', 'Victoria Falls', 'Walt Disney World', 'Western Wall', 'Yellowstone National Park', 'Yosemite National Park', 'Zermatt'
        ]
    
    #val = sorted_list[rd.randrange(0 ,len(sorted_list))]
    #print(f'\n{sorted_list}\n{val}\n\n')
    #user_input = ""

    # if input('Is search to be case sensitive? (Yes / No) : ').lower() == 'yes':
    #     case_sens = True
    # else:
    #     case_sens = False

    # if user_input in ["Manual input search - Fuzzy","Letter search for POI(s)"]:
    #     fuzzy_sear = True
    # else:
    #     fuzzy_sear = False

    if sorted_list.count(val) >= 2 or case_sens == False or fuzzy_sear == True:
        #print('lin')
        #print(srslgs.linear_search(sorted_list, val, case_sens, True))        
        output = srslgs.linear_search(sorted_list, val, case_sens, True)

    else:
        #print('bin')
        #print(srslgs.binary_search(sorted_list, val, case_sens))
        output = srslgs.binary_search(sorted_list, val, case_sens)


    assert output == expected_result

 